// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Persistencia.Data.Migrations
{
    [DbContext(typeof(PruebaContext))]
    [Migration("20230818130926_ChaneKeys")]
    partial class ChaneKeys
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Alquiler", b =>
                {
                    b.Property<int>("ID_Alquiler")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal>("Costo_Total")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("Fecha_Fin")
                        .HasColumnType("date");

                    b.Property<DateTime>("Fecha_Inicio")
                        .HasColumnType("date");

                    b.Property<int>("ID_Automovil")
                        .HasColumnType("int");

                    b.Property<int>("ID_Cliente")
                        .HasColumnType("int");

                    b.HasKey("ID_Alquiler");

                    b.HasIndex("ID_Automovil");

                    b.HasIndex("ID_Cliente");

                    b.ToTable("alquiler", (string)null);
                });

            modelBuilder.Entity("Automovil", b =>
                {
                    b.Property<int>("ID_Automovil")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Anio")
                        .HasMaxLength(11)
                        .HasColumnType("int");

                    b.Property<int>("Capacidad")
                        .HasMaxLength(11)
                        .HasColumnType("int");

                    b.Property<string>("Marca")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Modelo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<decimal>("Precio_Diario")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("ID_Automovil");

                    b.ToTable("automovil", (string)null);
                });

            modelBuilder.Entity("Cliente", b =>
                {
                    b.Property<int>("ID_Cliente")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("DNI")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.HasKey("ID_Cliente");

                    b.ToTable("cliente", (string)null);
                });

            modelBuilder.Entity("Empleado", b =>
                {
                    b.Property<int>("ID_Empleado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Cargo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("DNI")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.HasKey("ID_Empleado");

                    b.ToTable("empleado", (string)null);
                });

            modelBuilder.Entity("Registro_Devolucion", b =>
                {
                    b.Property<int>("ID_Registro")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal>("Combustible_Devulto")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime>("Fecha_Devolucion")
                        .HasColumnType("date");

                    b.Property<int>("ID_Alquiler")
                        .HasColumnType("int");

                    b.Property<int>("ID_Empleado")
                        .HasColumnType("int");

                    b.Property<int>("Kilometraje_Devuelto")
                        .HasMaxLength(11)
                        .HasColumnType("int");

                    b.Property<decimal>("Monto_Adicional")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("ID_Registro");

                    b.HasIndex("ID_Alquiler");

                    b.HasIndex("ID_Empleado");

                    b.ToTable("registro_devolucion", (string)null);
                });

            modelBuilder.Entity("Registro_Entrega", b =>
                {
                    b.Property<int>("ID_Registro")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal>("Combustible_Entregado")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime>("Fecha_Entrega")
                        .HasColumnType("date");

                    b.Property<int>("ID_Alquiler")
                        .HasColumnType("int");

                    b.Property<int>("ID_Empleado")
                        .HasColumnType("int");

                    b.Property<int>("Kilometraje_Entregado")
                        .HasMaxLength(11)
                        .HasColumnType("int");

                    b.HasKey("ID_Registro");

                    b.HasIndex("ID_Alquiler");

                    b.HasIndex("ID_Empleado");

                    b.ToTable("registro_Entrega", (string)null);
                });

            modelBuilder.Entity("Reserva", b =>
                {
                    b.Property<int>("Id_Reserva")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("Fecha_Fin")
                        .HasColumnType("date");

                    b.Property<DateTime>("Fecha_Inicio")
                        .HasColumnType("date");

                    b.Property<DateTime>("Fecha_Reserva")
                        .HasColumnType("date");

                    b.Property<int>("ID_Automovil")
                        .HasColumnType("int");

                    b.Property<int>("ID_Cliente")
                        .HasColumnType("int");

                    b.HasKey("Id_Reserva");

                    b.HasIndex("ID_Automovil");

                    b.HasIndex("ID_Cliente");

                    b.ToTable("reserva", (string)null);
                });

            modelBuilder.Entity("Sucursal", b =>
                {
                    b.Property<int>("ID_Sucursal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.HasKey("ID_Sucursal");

                    b.ToTable("sucursal", (string)null);
                });

            modelBuilder.Entity("Sucursal_Automovil", b =>
                {
                    b.Property<int>("ID_Automovil")
                        .HasColumnType("int");

                    b.Property<int>("ID_Sucursal")
                        .HasColumnType("int");

                    b.Property<int>("Cantidad_Disponible")
                        .HasColumnType("int");

                    b.HasKey("ID_Automovil", "ID_Sucursal");

                    b.HasIndex("ID_Sucursal");

                    b.ToTable("sucursal_automovil", (string)null);
                });

            modelBuilder.Entity("Alquiler", b =>
                {
                    b.HasOne("Automovil", "Automovil")
                        .WithMany("Alquileres")
                        .HasForeignKey("ID_Automovil")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cliente", "Cliente")
                        .WithMany("Alquileres")
                        .HasForeignKey("ID_Cliente")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Automovil");

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("Registro_Devolucion", b =>
                {
                    b.HasOne("Alquiler", "Alquiler")
                        .WithMany("Registro_Devoluciones")
                        .HasForeignKey("ID_Alquiler")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Empleado", "Empleado")
                        .WithMany("Registro_Devoluciones")
                        .HasForeignKey("ID_Empleado")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Alquiler");

                    b.Navigation("Empleado");
                });

            modelBuilder.Entity("Registro_Entrega", b =>
                {
                    b.HasOne("Alquiler", "Alquiler")
                        .WithMany("Registro_Entregas")
                        .HasForeignKey("ID_Alquiler")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Empleado", "Empleado")
                        .WithMany("Registro_Entregas")
                        .HasForeignKey("ID_Empleado")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Alquiler");

                    b.Navigation("Empleado");
                });

            modelBuilder.Entity("Reserva", b =>
                {
                    b.HasOne("Automovil", "Automovil")
                        .WithMany("Reservas")
                        .HasForeignKey("ID_Automovil")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cliente", "Cliente")
                        .WithMany("Reservas")
                        .HasForeignKey("ID_Cliente")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Automovil");

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("Sucursal_Automovil", b =>
                {
                    b.HasOne("Automovil", "Automovil")
                        .WithMany("Sucursal_Automoviles")
                        .HasForeignKey("ID_Automovil")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sucursal", "Sucursal")
                        .WithMany("Sucursal_Automoviles")
                        .HasForeignKey("ID_Sucursal")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Automovil");

                    b.Navigation("Sucursal");
                });

            modelBuilder.Entity("Alquiler", b =>
                {
                    b.Navigation("Registro_Devoluciones");

                    b.Navigation("Registro_Entregas");
                });

            modelBuilder.Entity("Automovil", b =>
                {
                    b.Navigation("Alquileres");

                    b.Navigation("Reservas");

                    b.Navigation("Sucursal_Automoviles");
                });

            modelBuilder.Entity("Cliente", b =>
                {
                    b.Navigation("Alquileres");

                    b.Navigation("Reservas");
                });

            modelBuilder.Entity("Empleado", b =>
                {
                    b.Navigation("Registro_Devoluciones");

                    b.Navigation("Registro_Entregas");
                });

            modelBuilder.Entity("Sucursal", b =>
                {
                    b.Navigation("Sucursal_Automoviles");
                });
#pragma warning restore 612, 618
        }
    }
}
